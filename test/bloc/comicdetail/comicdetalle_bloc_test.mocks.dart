// Mocks generated by Mockito 5.4.0 from annotations
// in sundevs/test/bloc/comicdetalle_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sundevs/models/models.dart' as _i2;

import 'comicdetalle_bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImagenComic_0 extends _i1.SmartFake implements _i2.ImagenComic {
  _FakeImagenComic_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockComicDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockComicDetailRepository extends _i1.Mock
    implements _i3.MockComicDetailRepository {
  MockMockComicDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ImagenComic> getComicDetail(String? url) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComicDetail,
          [url],
        ),
        returnValue: _i4.Future<_i2.ImagenComic>.value(_FakeImagenComic_0(
          this,
          Invocation.method(
            #getComicDetail,
            [url],
          ),
        )),
      ) as _i4.Future<_i2.ImagenComic>);
  @override
  _i4.Future<List<_i2.Imagen>> fetchImages(List<_i2.Volume>? items) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchImages,
          [items],
        ),
        returnValue: _i4.Future<List<_i2.Imagen>>.value(<_i2.Imagen>[]),
      ) as _i4.Future<List<_i2.Imagen>>);
}
